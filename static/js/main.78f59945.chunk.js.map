{"version":3,"sources":["config/firebase.js","config/theme.js","helpers/index.js","config/constants.js","layouts/CreateTaskLayOut/CreateTaskLayOut.jsx","components/DropDown/DropDown.js","components/CreateTask/CreateTask.js","components/Filters/Filters.js","hooks/useDnD.js","components/ConfirmationModal/ConfirmationModal.js","components/Task/Task.js","components/Column/Column.js","layouts/LayOut/LayOut.jsx","components/Board/Board.js","App.jsx","services/firebaseService.js","store/index.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","theme","createMuiTheme","palette","type","typography","h5","fontSize","getHomeColumn","columns","taskId","columnId","Object","keys","find","column","items","item","id","applyTasksFilters","titleFilter","tagFilter","tasks","tag","Array","isArray","filter","task","filterTasksByTag","title","RegExp","test","filterTasksByTitle","tagOptions","value","label","statusOptions","usersList","CreateTaskLayOut","children","className","Paper","Grid","container","direction","Typography","align","variant","xs","useStyles","makeStyles","dropdown","color","marginTop","marginBottom","DropDown","options","handleOnChange","classes","placeholder","onChange","paper","width","backgroundColor","background","border","boxShadow","shadows","padding","spacing","modalInnerGrid","height","datePickerWrapper","minHeight","minWidth","borderRadius","closeButton","marginLeft","CreateTask","isVisible","toggleVisible","useState","setTitle","description","setDescription","Date","dueDate","setDueDate","setTag","status","setStatus","user","setUser","createTask","useStoreActions","actions","a","assignee","createdDate","Modal","open","onClose","TextField","required","fullWidth","event","target","m","md","dateFormat","selected","date","Button","onClick","disabled","length","paperWrapper","position","top","search","shape","fade","common","white","margin","display","justifyContent","searchIcon","pointerEvents","alignSelf","tagsDropDown","Filters","handleTagChange","handleTitleChange","elevation","InputBase","root","inputRoot","input","inputInput","inputProps","useDnD","baseColumns","setColumns","selectedTasksIds","setSelectedTasksIds","draggingTaskId","setDragginTaskId","updateTask","updateTasks","useEffect","onDragStart","useCallback","start","draggableId","unselectAll","onDragEnd","result","destination","source","droppableId","sourceColumn","destColumn","selectedTasks","includes","statusValue","values","copiedItems","splice","index","removed","toggleSelection","newTaskIds","toggleSelectionInGroup","indexOf","shallow","multiSelectTo","newTaskId","updated","selectedTaskIds","columnOfNew","indexOfNew","map","lastSelected","columnOfLast","indexOfLast","slice","isSelectingForwards","end","toAdd","sorted","reverse","multiSelect","ConfirmationModal","handleConfirm","handleCancel","React","setOpen","handleClose","Dialog","DialogTitle","style","cursor","DialogContent","DialogContentText","DialogActions","autoFocus","keyCodes","avatarWrapper","alignItems","avatar","marginRight","cardContentWrapper","Task","isSelected","deleteTask","action","openModal","setOpenModal","performAction","navigator","platform","ctrlKey","metaKey","wasToggleInSelectionGroupKeyUsed","wasMultiSelectKeyUsed","handleOnClick","defaultPrevented","button","preventDefault","handleOnTouchEnd","shiftKey","key","provided","snapshot","onTouchEnd","onKeyDown","isDragging","keyCode","handleOnKeyDown","ref","innerRef","draggableProps","dragHandleProps","userSelect","Card","CardHeader","IconButton","aria-label","CardContent","component","Avatar","name","initials","toUpperCase","option","getSelectedMap","memoizeOne","reduce","previous","current","Column","memo","flex","flexDirection","droppableProps","isDraggingOver","Boolean","isGhosting","LayOut","wrapper","Board","useDnd","entries","createTaskButton","circularProgressWrapper","left","circularProgressBar","App","setIsVisible","toggleIsVisible","setTagFilter","setTitleFilter","useStoreState","state","fetchTasks","filteredTasks","done","ThemeProvider","CircularProgress","db","firestore","getTasks","collection","get","data","docs","doc","add","set","delete","tasksModel","addTasks","payload","thunk","Error","_","Promise","all","store","createStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.78f59945.chunk.js","sourcesContent":["import firebase from 'firebase';\n\nconst config = {\n  apiKey: 'AIzaSyDi94RhaY6ZzKEXGViPJQ4brsAifE2aZdY',\n  authDomain: 'kanban-board-81e54.firebaseapp.com',\n  databaseURL: 'https://kanban-board-81e54.firebaseio.com',\n  projectId: 'kanban-board-81e54',\n  storageBucket: 'kanban-board-81e54.appspot.com',\n  messagingSenderId: '852366999129',\n  appId: '1:852366999129:web:f66d876ca86eea0e29fb48'\n};\n\nfirebase.initializeApp(config);\n\nexport default firebase;\n","import { createMuiTheme } from '@material-ui/core';\n\nconst theme = createMuiTheme({\n  palette: {\n    type: 'dark'\n  },\n  typography: {\n    h5: {\n      fontSize: '1rem'\n    }\n  }\n});\n\nexport default theme;\n","import initials from 'initials';\n\nfunction getHomeColumn(columns, taskId) {\n  const columnId = Object.keys(columns).find((column) => {\n    return columns[column].items.find((item) => item.id === taskId);\n  });\n\n  return columns[columnId];\n}\n\nexport function multiSelectTo(columns, selectedTaskIds, newTaskId) {\n  //verify this function after adding the first item the next tasks gets added as an object instead of just ids\n  // Nothing already selected\n  if (!selectedTaskIds.length) {\n    return [newTaskId];\n  }\n\n  const columnOfNew = getHomeColumn(columns, newTaskId);\n  const indexOfNew = columnOfNew.items\n    .map((item) => item.id)\n    .indexOf(newTaskId);\n\n  const lastSelected = selectedTaskIds[selectedTaskIds.length - 1];\n  const columnOfLast = getHomeColumn(columns, lastSelected);\n  const indexOfLast = columnOfLast.items\n    .map((item) => item.id)\n    .indexOf(lastSelected);\n\n  // multi selecting to another column\n  // select everything up to the index of the current item\n  if (columnOfNew !== columnOfLast) {\n    return columnOfNew.items.slice(0, indexOfNew + 1);\n  }\n\n  // multi selecting in the same column\n  // need to select everything between the last index and the current index inclusive\n\n  // nothing to do here\n  if (indexOfNew === indexOfLast) {\n    return null;\n  }\n\n  const isSelectingForwards = indexOfNew > indexOfLast;\n  const start = isSelectingForwards ? indexOfLast : indexOfNew;\n  const end = isSelectingForwards ? indexOfNew : indexOfLast;\n\n  const inBetween = columnOfNew.items.slice(start, end + 1);\n\n  // everything inbetween needs to have it's selection toggled.\n  // with the exception of the start and end values which will always be selected\n  const toAdd = inBetween.filter(({ id }) => {\n    // if already selected: then no need to select it again\n    if (selectedTaskIds.includes(id)) {\n      return false;\n    }\n    return true;\n  });\n\n  const sorted = isSelectingForwards ? toAdd : [...toAdd].reverse();\n  const combined = [...selectedTaskIds, ...sorted.map((sorted) => sorted.id)];\n\n  return combined;\n}\n\nexport function getUserInitials(name) {\n  return initials(name).toUpperCase();\n}\n\nfunction filterTasksByTitle(title, tasks) {\n  if (!Array.isArray(tasks)) {\n    return [];\n  }\n\n  if (!title) {\n    return tasks;\n  }\n\n  return tasks.filter((task) => new RegExp(title, 'gi').test(task.title));\n}\n\nfunction filterTasksByTag(tag, tasks) {\n  if (!Array.isArray(tasks)) {\n    return [];\n  }\n\n  if (!tag) {\n    return tasks;\n  }\n\n  return tasks.filter((task) => task.tag === tag);\n}\n\nexport function applyTasksFilters(titleFilter, tagFilter, tasks) {\n  return filterTasksByTag(tagFilter, filterTasksByTitle(titleFilter, tasks));\n}\n","export const tagOptions = [\n  { value: 'article', label: 'Article' },\n  { value: 'blog-post', label: 'Blog Post' },\n  { value: 'long-form', label: 'Long Form' }\n];\n\nexport const statusOptions = [\n  { value: 'to-do', label: 'To Do' },\n  { value: 'in-progress', label: 'In Progress' },\n  { value: 'done', label: 'Done' }\n];\n\nexport const usersList = [\n  { value: 'Foo User', label: 'Foo User' },\n  { value: 'Super User', label: 'Super User' },\n  { value: 'Lazy User', label: 'Lazy User' }\n];\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Grid, Paper, Typography } from '@material-ui/core';\n\nfunction CreateTaskLayOut({ children, className }) {\n  return (\n    <Paper>\n      <Grid container direction=\"column\" className={className}>\n        <Typography align=\"center\" variant=\"h2\">Create Task</Typography>\n        <Grid item container>\n          <Grid item xs={2} />\n          <Grid item xs={8}>{children}</Grid>\n          <Grid item xs={2}/>\n        </Grid>\n      </Grid>\n    </Paper>\n  );\n}\n\n\nCreateTaskLayOut.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string\n}\n\nexport default CreateTaskLayOut;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Select from 'react-select';\nimport { makeStyles } from '@material-ui/core';\n\nconst useStyles = makeStyles({\n  dropdown: {\n    color: 'black',\n    marginTop: '10px',\n    marginBottom: '20px'\n  }\n});\n\nfunction DropDown({ options, handleOnChange, label }) {\n  const classes = useStyles();\n  return (\n    <Select\n      className={classes.dropdown}\n      placeholder={label}\n      options={options}\n      onChange={({ value }) => handleOnChange(value)}\n    />\n  );\n}\n\nDropDown.propTypes = {\n  options: PropTypes.array,\n  handleOnChange: PropTypes.func,\n  label: PropTypes.string\n};\n\nexport default DropDown;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Typography,\n  Grid,\n  TextField,\n  Button,\n  Modal,\n  makeStyles\n} from '@material-ui/core';\nimport { useStoreActions } from 'easy-peasy';\nimport DatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css';\n\nimport { statusOptions, tagOptions, usersList } from '../../config/constants';\n\nimport CreateTaskLayOut from '../../layouts/CreateTaskLayOut';\nimport DropDown from '../DropDown';\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    width: '95%',\n    backgroundColor: theme.palette.background.paper,\n    border: '2px solid #000',\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3)\n  },\n  modalInnerGrid: {\n    height: '100%',\n    padding: '30px'\n  },\n  datePickerWrapper: {\n    minHeight: '38px',\n    minWidth: '250px',\n    border: '1px solid hsl(0,0%,100%)',\n    borderRadius: 4,\n    marginBottom: '20px'\n  },\n  closeButton: {\n    marginLeft: '15px'\n  }\n}));\n\nfunction CreateTask({ isVisible, toggleVisible }) {\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const [dueDate, setDueDate] = useState(new Date());\n  const [tag, setTag] = useState('');\n  const [status, setStatus] = useState('');\n  const [user, setUser] = useState('');\n  const createTask = useStoreActions((actions) => actions.createTask);\n\n  async function onCreateTask() {\n    createTask({\n      title: title,\n      description: description,\n      status: status ? status : 'to-do',\n      tag: tag ? tag : 'article',\n      assignee: user ? user : 'not assigned',\n      dueDate: dueDate,\n      createdDate: new Date()\n    });\n    toggleVisible();\n  }\n\n  const classes = useStyles();\n  return (\n    <Modal open={isVisible} onClose={toggleVisible} className={classes.paper}>\n      <CreateTaskLayOut className={classes.modalInnerGrid}>\n        <form>\n          <TextField\n            required\n            id=\"title\"\n            label=\"Title\"\n            fullWidth\n            onChange={(event) => setTitle(event.target.value)}\n            value={title}\n          />\n          <TextField\n            required\n            id=\"description\"\n            label=\"Description\"\n            fullWidth\n            onChange={(event) => setDescription(event.target.value)}\n          />\n          <Grid item container m={2}>\n            <Grid item md={5}>\n              <DropDown\n                options={statusOptions}\n                handleOnChange={setStatus}\n                label={'Status'}\n              />\n            </Grid>\n            <Grid item md={2} />\n            <Grid item md={5}>\n              <DropDown\n                options={tagOptions}\n                handleOnChange={setTag}\n                label={'Tags'}\n              />\n            </Grid>\n            <Grid item md={5}>\n              <Typography>Due Date</Typography>\n              <DatePicker\n                className={classes.datePickerWrapper}\n                dateFormat=\"yyyy/MM/dd\"\n                selected={dueDate}\n                onChange={(date) => setDueDate(date)}\n              />\n            </Grid>\n            <Grid item md={2} />\n            <Grid item md={5}>\n              <DropDown\n                options={usersList}\n                handleOnChange={setUser}\n                label={'Assignee'}\n              />\n            </Grid>\n          </Grid>\n        </form>\n        <Button\n          variant=\"contained\"\n          onClick={onCreateTask}\n          disabled={title.length === 0 || description.length === 0}\n        >\n          create\n        </Button>\n        <Button\n          variant=\"contained\"\n          onClick={toggleVisible}\n          color=\"secondary\"\n          className={classes.closeButton}\n        >\n          close\n        </Button>\n      </CreateTaskLayOut>\n    </Modal>\n  );\n}\n\nCreateTask.propTypes = {\n  isVisible: PropTypes.bool,\n  toggleVisible: PropTypes.func\n};\n\nexport default CreateTask;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Paper,\n  InputBase,\n  makeStyles,\n  fade,\n  Typography\n} from '@material-ui/core';\nimport SearchIcon from '@material-ui/icons/Search';\n\nimport { tagOptions } from '../../config/constants';\n\nimport DropDown from '../DropDown';\n\nconst useStyles = makeStyles((theme) => ({\n  paperWrapper: {\n    position: 'absolute',\n    width: '250px',\n    height: '150px',\n    top: '50px'\n  },\n  search: {\n    position: 'relative',\n    borderRadius: theme.shape.borderRadius,\n    backgroundColor: fade(theme.palette.common.white, 0.15),\n    '&:hover': {\n      backgroundColor: fade(theme.palette.common.white, 0.25)\n    },\n    margin: '10px',\n    width: 'auto',\n    display: 'flex',\n    justifyContent: 'space-around'\n  },\n  searchIcon: {\n    display: 'flex',\n    height: '100%',\n    pointerEvents: 'none',\n    alignSelf: 'center',\n    justifyContent: 'center'\n  },\n  tagsDropDown: {\n    margin: '10px'\n  }\n}));\n\nfunction Filters({ handleTagChange, handleTitleChange }) {\n  const classes = useStyles();\n  return (\n    <Paper m={1} elevation={10} className={classes.paperWrapper}>\n      <Typography variant=\"h5\" align=\"center\">\n        Filters\n      </Typography>\n      <div className={classes.search}>\n        <div className={classes.searchIcon}>\n          <SearchIcon />\n        </div>\n        <InputBase\n          placeholder=\"Filter by task title\"\n          classes={{\n            root: classes.inputRoot,\n            input: classes.inputInput\n          }}\n          inputProps={{ 'aria-label': 'search' }}\n          onChange={(event) => handleTitleChange(event.target.value)}\n        />\n      </div>\n      <div className={classes.tagsDropDown}>\n        <DropDown\n          options={tagOptions}\n          handleOnChange={handleTagChange}\n          label={'Tags'}\n        />\n      </div>\n    </Paper>\n  );\n}\n\nFilters.propTypes = {\n  handleTagChange: PropTypes.func.isRequired,\n  handleTitleChange: PropTypes.func.isRequired\n};\n\nexport default Filters;\n","import { useState, useCallback, useEffect } from 'react';\nimport { useStoreActions } from 'easy-peasy';\n\nimport { multiSelectTo as multiSelect } from '../helpers';\n\nfunction useDnD(baseColumns) {\n  const [columns, setColumns] = useState(baseColumns);\n  const [selectedTasksIds, setSelectedTasksIds] = useState([]);\n  const [draggingTaskId, setDragginTaskId] = useState(null);\n  const { updateTask, updateTasks } = useStoreActions((actions) => actions);\n\n  useEffect(() => {\n    setColumns(baseColumns);\n  }, [baseColumns]);\n\n  const onDragStart = useCallback(\n    (start) => {\n      const { draggableId } = start;\n      const selected = selectedTasksIds.find(\n        (taskId) => taskId === draggableId\n      );\n      // if dragging an item that is not selected - unselect all items\n      if (!selected) {\n        unselectAll();\n      }\n\n      setDragginTaskId(draggableId);\n    },\n    [selectedTasksIds]\n  );\n\n  const onDragEnd = useCallback(\n    (result, columns) => {\n      if (!result.destination) return;\n      const { source, destination } = result;\n\n      if (source.droppableId !== destination.droppableId) {\n        const sourceColumn = columns[source.droppableId];\n        const destColumn = columns[destination.droppableId];\n\n        if (selectedTasksIds.length > 1) {\n          const selectedTasks = sourceColumn.items.filter((item) =>\n            selectedTasksIds.includes(item.id)\n          );\n          setColumns({\n            ...columns,\n            [source.droppableId]: {\n              ...sourceColumn,\n              items: sourceColumn.items.filter(\n                (item) => !selectedTasksIds.includes(item.id)\n              )\n            },\n            [destination.droppableId]: {\n              ...destColumn,\n              items: [...destColumn.items, ...selectedTasks]\n            }\n          });\n          updateTasks({\n            statusValue: destination.droppableId,\n            tasks: selectedTasks\n          });\n          setDragginTaskId(null);\n          setSelectedTasksIds([]);\n          return;\n        }\n\n        const task = sourceColumn.items.find(\n          (item) => item.id === draggingTaskId\n        );\n        setColumns({\n          ...columns,\n          [source.droppableId]: {\n            ...sourceColumn,\n            items: sourceColumn.items.filter(\n              (item) => item.id !== draggingTaskId\n            )\n          },\n          [destination.droppableId]: {\n            ...destColumn,\n            items: [...destColumn.items, task]\n          }\n        });\n\n        updateTask({\n          id: draggingTaskId,\n          values: {\n            ...task,\n            status: destination.droppableId\n          }\n        });\n      } else {\n        const column = columns[source.droppableId];\n        const copiedItems = [...column.items];\n        const [removed] = copiedItems.splice(source.index, 1);\n        copiedItems.splice(destination.index, 0, removed);\n        setColumns({\n          ...columns,\n          [source.droppableId]: {\n            ...column,\n            items: copiedItems\n          }\n        });\n      }\n      setDragginTaskId(null);\n      setSelectedTasksIds([]);\n    },\n    [selectedTasksIds, draggingTaskId]\n  );\n\n  const unselectAll = () => setSelectedTasksIds([]);\n\n  const toggleSelection = useCallback(\n    (taskId) => {\n      const wasSelected = selectedTasksIds.includes(taskId);\n\n      const newTaskIds = (() => {\n        // Task was not previously selected\n        // now will be the only selected item\n        if (!wasSelected) {\n          return [taskId];\n        }\n\n        // Task was part of a selected group\n        // will now become the only selected item\n        if (selectedTasksIds.length > 1) {\n          return [taskId];\n        }\n\n        // task was previously selected but not in a group\n        // we will now clear the selection\n        return [];\n      })();\n\n      setSelectedTasksIds(newTaskIds);\n    },\n    [selectedTasksIds]\n  );\n\n  const toggleSelectionInGroup = useCallback(\n    (taskId) => {\n      const index = selectedTasksIds.indexOf(taskId);\n\n      // if not selected - add it to the selected items\n      if (index === -1) {\n        setSelectedTasksIds([...selectedTasksIds, taskId]);\n        return;\n      }\n\n      // it was previously selected and now needs to be removed from the group\n      const shallow = [...selectedTasksIds];\n      shallow.splice(index, 1);\n      setSelectedTasksIds(shallow);\n    },\n    [selectedTasksIds]\n  );\n\n  const multiSelectTo = useCallback(\n    (newTaskId) => {\n      const updated = multiSelect(columns, selectedTasksIds, newTaskId);\n\n      if (updated == null) {\n        return;\n      }\n\n      setSelectedTasksIds(updated);\n    },\n    [selectedTasksIds, columns]\n  );\n\n  return {\n    columns,\n    draggingTaskId,\n    selectedTasksIds,\n    multiSelectTo,\n    toggleSelection,\n    toggleSelectionInGroup,\n    onDragStart,\n    onDragEnd\n  };\n}\n\nexport default useDnD;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  DialogContentText\n} from '@material-ui/core';\n\nfunction ConfirmationModal({ isVisible, handleConfirm, handleCancel }) {\n  const [open, setOpen] = React.useState(isVisible);\n\n  const handleClose = () => {\n    setOpen(false);\n    handleCancel();\n  };\n\n  return (\n    <div>\n      <Dialog open={open} onClose={handleClose}>\n        <DialogTitle style={{ cursor: 'move' }}>Deleting Task</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            Are You sure about this? there's no way back.\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button autoFocus onClick={handleClose} color=\"secondary\">\n            Cancel\n          </Button>\n          <Button onClick={handleConfirm} color=\"secondary\">\n            DO IT!\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n\nConfirmationModal.propTypes = {\n  isVisible: PropTypes.bool,\n  handleConfirm: PropTypes.func,\n  handleCancel: PropTypes.func\n};\n\nexport default ConfirmationModal;\n","import React, { useState, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { Draggable } from 'react-beautiful-dnd';\nimport { useStoreActions } from 'easy-peasy';\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  Typography,\n  Avatar,\n  makeStyles,\n  IconButton\n} from '@material-ui/core';\nimport DeleteIcon from '@material-ui/icons/Delete';\n\nimport ConfirmationModal from '../ConfirmationModal';\n\nimport { tagOptions, statusOptions } from '../../config/constants';\nimport { getUserInitials } from '../../helpers/index';\n\nconst keyCodes = {\n  enter: 13,\n  escape: 27,\n  arrowDown: 40,\n  arrowUp: 38,\n  tab: 9\n};\nconst primaryButton = 0;\n\nconst useStyles = makeStyles({\n  avatarWrapper: {\n    display: 'flex',\n    alignItems: 'center'\n  },\n  avatar: {\n    marginRight: '10px',\n    width: '20px',\n    height: '20px',\n    fontSize: '0.25rem'\n  },\n  title: {\n    padding: '10px 10px 0 10px'\n  },\n  cardContentWrapper: {\n    padding: '10px 10px 0 10px'\n  }\n});\n\nfunction Task({\n  index,\n  task,\n  toggleSelection,\n  toggleSelectionInGroup,\n  multiSelectTo,\n  isSelected\n}) {\n  const deleteTask = useStoreActions((action) => action.deleteTask);\n  const [openModal, setOpenModal] = useState(false);\n\n  function performAction(event) {\n    if (wasToggleInSelectionGroupKeyUsed(event)) {\n      toggleSelectionInGroup(task.id);\n      return;\n    }\n\n    if (wasMultiSelectKeyUsed(event)) {\n      multiSelectTo(task.id);\n      return;\n    }\n\n    toggleSelection(task.id);\n  }\n\n  function handleOnKeyDown(event, snapshot) {\n    if (event.defaultPrevented) {\n      return;\n    }\n\n    if (snapshot.isDragging) {\n      return;\n    }\n\n    if (event.keyCode !== keyCodes.enter) {\n      return;\n    }\n\n    // we are using the event for selection\n    event.preventDefault();\n\n    performAction(event);\n  }\n\n  // Using onClick as it will be correctly\n  // preventing if there was a drag\n  function handleOnClick(event) {\n    if (event.defaultPrevented) {\n      return;\n    }\n\n    if (event.button !== primaryButton) {\n      return;\n    }\n\n    // marking the event as used\n    event.preventDefault();\n\n    performAction(event);\n  }\n\n  function handleOnTouchEnd(event) {\n    if (event.defaultPrevented) {\n      return;\n    }\n\n    // marking the event as used\n    // we would also need to add some extra logic to prevent the click\n    // if this element was an anchor\n    event.preventDefault();\n    toggleSelectionInGroup(task.id);\n  }\n\n  // Determines if the platform specific toggle selection in group key was used\n  function wasToggleInSelectionGroupKeyUsed(event) {\n    const isUsingWindows = navigator.platform.indexOf('Win') >= 0;\n    return isUsingWindows ? event.ctrlKey : event.metaKey;\n  }\n\n  // Determines if the multiSelect key was used\n  const wasMultiSelectKeyUsed = (event) => event.shiftKey;\n\n  const classes = useStyles();\n  return (\n    <Fragment>\n      {openModal && (\n        <ConfirmationModal\n          isVisible={openModal}\n          handleConfirm={() => deleteTask(task.id)}\n          handleCancel={() => setOpenModal(false)}\n        />\n      )}\n      <Draggable key={task.id} draggableId={task.id} index={index}>\n        {(provided, snapshot) => {\n          return (\n            <div\n              onClick={handleOnClick}\n              onTouchEnd={handleOnTouchEnd}\n              onKeyDown={(event) => handleOnKeyDown(event, snapshot)}\n              ref={provided.innerRef}\n              {...provided.draggableProps}\n              {...provided.dragHandleProps}\n              style={{\n                userSelect: 'none',\n                margin: '0 0 8px 0',\n                minHeight: '50px',\n                border:\n                  snapshot.isDragging || isSelected\n                    ? '3px solid #FF6347'\n                    : 'none',\n                color: 'white',\n                ...provided.draggableProps.style\n              }}\n            >\n              <Card>\n                <CardHeader\n                  title={task.title}\n                  className={classes.title}\n                  action={\n                    <IconButton\n                      aria-label=\"settings\"\n                      onClick={() => setOpenModal(true)}\n                    >\n                      <DeleteIcon />\n                    </IconButton>\n                  }\n                />\n                <CardContent className={classes.cardContentWrapper}>\n                  <Typography\n                    className={classes.avatarWrapper}\n                    variant=\"body2\"\n                    color=\"textSecondary\"\n                    component=\"span\"\n                  >\n                    <Avatar className={classes.avatar}>\n                      {getUserInitials(task.assignee)}\n                    </Avatar>\n                    {task.assignee}\n                  </Typography>\n                  <Typography variant=\"body2\">\n                    Status:{' '}\n                    {\n                      statusOptions.find(\n                        (option) => option.value === task.status\n                      ).label\n                    }\n                  </Typography>\n                  <Typography variant=\"body2\">\n                    Tag:{' '}\n                    {\n                      tagOptions.find((option) => option.value === task.tag)\n                        .label\n                    }\n                  </Typography>\n                </CardContent>\n              </Card>\n            </div>\n          );\n        }}\n      </Draggable>\n    </Fragment>\n  );\n}\n\nTask.propTypes = {\n  index: PropTypes.number,\n  task: PropTypes.object,\n  toggleSelection: PropTypes.func,\n  toggleSelectionInGroup: PropTypes.func,\n  multiSelectTo: PropTypes.func,\n  isSelected: PropTypes.bool\n};\n\nexport default Task;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Droppable } from 'react-beautiful-dnd';\nimport memoizeOne from 'memoize-one';\nimport { Typography } from '@material-ui/core';\n\nimport Task from '../Task';\n\nconst getSelectedMap = memoizeOne((selectedTaskIds) =>\n  selectedTaskIds.reduce((previous, current) => {\n    previous[current] = true;\n    return previous;\n  }, {})\n);\n\nconst Column = React.memo(\n  ({\n    column,\n    columnId,\n    multiSelectTo,\n    toggleSelection,\n    toggleSelectionInGroup,\n    selectedTasksIds,\n    draggingTaskId\n  }) => {\n    return (\n      <div\n        style={{\n          display: 'flex',\n          flex: 1,\n          flexDirection: 'column',\n          alignItems: 'center'\n        }}\n      >\n        <Typography variant=\"h4\">{column.name}</Typography>\n        <Droppable droppableId={columnId}>\n          {(provided, snapshot) => {\n            return (\n              <div\n                ref={provided.innerRef}\n                {...provided.droppableProps}\n                style={{\n                  background: snapshot.isDraggingOver ? '#FF6347' : 'lightgrey',\n                  padding: '4px',\n                  width: '250px',\n                  minHeight: '500px',\n                  height: '93vh'\n                }}\n              >\n                {column.items.map((item, index) => {\n                  const isSelected = Boolean(\n                    getSelectedMap(selectedTasksIds)[item.id]\n                  );\n                  const isGhosting =\n                    isSelected &&\n                    Boolean(draggingTaskId) &&\n                    draggingTaskId !== item.id;\n                  return (\n                    <Task\n                      isSelected={isSelected}\n                      isGhosting={isGhosting}\n                      key={`task-${item.id}`}\n                      task={item}\n                      index={index}\n                      toggleSelection={toggleSelection}\n                      toggleSelectionInGroup={toggleSelectionInGroup}\n                      multiSelectTo={multiSelectTo}\n                    />\n                  );\n                })}\n                {provided.placeholder}\n              </div>\n            );\n          }}\n        </Droppable>\n      </div>\n    );\n  }\n);\n\nColumn.propTypes = {\n  column: PropTypes.object,\n  columnId: PropTypes.string,\n  multiSelectTo: PropTypes.func,\n  toggleSelection: PropTypes.func,\n  toggleSelectionInGroup: PropTypes.func,\n  selectedTasksIds: PropTypes.array,\n  draggingTaskId: PropTypes.string\n};\n\nexport default Column;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Grid } from '@material-ui/core';\n\nfunction LayOut({ children, className }) {\n  return (\n    <Grid container direction=\"column\" className={className}>\n      <Grid item container>\n        <Grid item xs={2}/>\n        <Grid item xs={8} container>\n          {children}\n        </Grid>\n        <Grid item xs={2}/>\n        </Grid>\n    </Grid>\n  );\n}\n\n\nLayOut.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string\n}\nexport default LayOut;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { DragDropContext } from 'react-beautiful-dnd';\nimport { makeStyles } from '@material-ui/core';\n\nimport { theme } from '../../config';\nimport useDnd from '../../hooks/useDnD';\n\nimport Column from '../Column';\nimport LayOut from '../../layouts/LayOut';\n\nconst useStyles = makeStyles({\n  wrapper: {\n    backgroundColor: 'rgb(36, 40, 42)',\n    width: '100vw',\n    height: '100vh',\n    color: '#fff'\n  }\n});\n\nfunction Board({ baseColumns }) {\n  const {\n    columns,\n    draggingTaskId,\n    selectedTasksIds,\n    multiSelectTo,\n    toggleSelection,\n    toggleSelectionInGroup,\n    onDragStart,\n    onDragEnd\n  } = useDnd(baseColumns);\n\n  const classes = useStyles(theme);\n\n  return (\n    <DragDropContext\n      onDragStart={onDragStart}\n      onDragEnd={(result) => onDragEnd(result, columns)}\n    >\n      <LayOut className={classes.wrapper}>\n        {Object.entries(columns).map(([columnId, column]) => {\n          return (\n            <Column\n              draggingTaskId={draggingTaskId}\n              selectedTasksIds={selectedTasksIds}\n              key={column.name}\n              column={column}\n              columnId={columnId}\n              multiSelectTo={multiSelectTo}\n              toggleSelection={toggleSelection}\n              toggleSelectionInGroup={toggleSelectionInGroup}\n            />\n          );\n        })}\n      </LayOut>\n    </DragDropContext>\n  );\n}\n\nBoard.propTypes = {\n  baseColumns: PropTypes.object\n};\n\nexport default Board;\n","import React, { useState, useEffect } from 'react';\nimport {\n  ThemeProvider,\n  makeStyles,\n  Button,\n  CircularProgress\n} from '@material-ui/core';\nimport { useStoreActions, useStoreState } from 'easy-peasy';\n\nimport { theme } from './config';\nimport { applyTasksFilters } from './helpers';\n\nimport CreateTask from './components/CreateTask';\nimport Filters from './components/Filters';\nimport Board from './components/Board';\n\nconst useStyles = makeStyles({\n  createTaskButton: {\n    position: 'absolute'\n  },\n  circularProgressWrapper: {\n    top: '50%',\n    left: '50%',\n    position: 'absolute'\n  },\n  circularProgressBar: {\n    color: 'rgb(187, 46, 31)',\n    width: '100px !important',\n    height: '100px !important'\n  }\n});\n\nfunction App() {\n  const [isVisible, setIsVisible] = useState(false);\n  const toggleIsVisible = () => setIsVisible(!isVisible);\n  const [tagFilter, setTagFilter] = useState('');\n  const [titleFilter, setTitleFilter] = useState('');\n  const tasks = useStoreState(state => state.tasks);\n  const fetchTasks = useStoreActions(actions => actions.fetchTasks);\n\n  useEffect(() => {\n    fetchTasks();\n  }, []);\n\n  const filteredTasks = applyTasksFilters(titleFilter, tagFilter, tasks);\n  const baseColumns = {\n    'to-do': {\n      name: 'To do',\n      items: filteredTasks.filter(task => task.status === 'to-do')\n    },\n    'in-progress': {\n      name: 'In Progress',\n      items: filteredTasks.filter(task => task.status === 'in-progress')\n    },\n    done: {\n      name: 'Done',\n      items: filteredTasks.filter(task => task.status === 'done')\n    }\n  };\n\n  const classes = useStyles(theme);\n\n  return (\n    <ThemeProvider theme={theme}>\n      {tasks.length === 0 && (\n        <div className={classes.circularProgressWrapper}>\n          <CircularProgress className={classes.circularProgressBar} />\n        </div>\n      )}\n      <Button\n        variant=\"contained\"\n        className={classes.createTaskButton}\n        onClick={toggleIsVisible}\n      >\n        create Task\n      </Button>\n      {isVisible && (\n        <CreateTask isVisible={isVisible} toggleVisible={toggleIsVisible} />\n      )}\n      <Filters\n        handleTagChange={setTagFilter}\n        handleTitleChange={setTitleFilter}\n      />\n      <Board baseColumns={baseColumns} />\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","import { firebase } from '../config';\n\nconst db = firebase.firestore();\nconst modelName = 'tasks';\n\nexport async function getTasks() {\n  const data = await db.collection(modelName).get();\n  return data.docs.map((doc) => ({ ...doc.data(), id: doc.id }));\n}\n\nexport async function createTask(values) {\n  return db.collection(modelName).add({ ...values });\n}\n\nexport async function updateTask(id, values) {\n  return db\n    .collection(modelName)\n    .doc(id)\n    .set({ ...values });\n}\n\nexport async function deleteTask(id) {\n  return db.collection(modelName).doc(id).delete();\n}\n","import { createStore, thunk, action } from 'easy-peasy';\nimport {\n  getTasks,\n  createTask,\n  updateTask,\n  deleteTask\n} from '../services/firebaseService';\n\nconst tasksModel = {\n  tasks: [],\n  addTasks: action((state, payload) => {\n    state.tasks = [...payload];\n  }),\n  fetchTasks: thunk(async (actions) => {\n    try {\n      const data = await getTasks();\n      actions.addTasks(data);\n    } catch (error) {\n      throw new Error(`Something went wrong fetching the tasks ${error}`);\n    }\n  }),\n  createTask: thunk(async (actions, payload) => {\n    try {\n      await createTask(payload);\n      actions.fetchTasks();\n    } catch (error) {\n      throw new Error(\n        `Something went wrong while creating the task please ${error}`\n      );\n    }\n  }),\n  updateTask: thunk(async (_, { id, values }) => {\n    try {\n      await updateTask(id, values);\n    } catch (error) {\n      throw new Error(`Something went wrong while updating the task ${error}`);\n    }\n  }),\n  updateTasks: thunk(async (_, { statusValue, tasks }) => {\n    try {\n      Promise.all(\n        tasks.map((task) =>\n          updateTask(task.id, { ...task, status: statusValue })\n        )\n      );\n    } catch (error) {\n      throw new Error(`Something went wrong while updating the tasks ${error}`);\n    }\n  }),\n  deleteTask: thunk(async (actions, payload) => {\n    try {\n      await deleteTask(payload);\n      actions.fetchTasks();\n    } catch (error) {\n      throw new Error(`Something went wrong while updating the tasks ${error}`);\n    }\n  })\n};\n\nconst store = createStore(tasksModel);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { StoreProvider } from 'easy-peasy';\nimport store from './store';\n\nReactDOM.render(\n  <StoreProvider store={store}>\n    <App />\n  </StoreProvider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}